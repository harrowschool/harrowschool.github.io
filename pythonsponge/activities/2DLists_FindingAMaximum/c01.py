# GLOBAL VARIABLES

# solar records have fields:
# LOCATION_ID, CAPTURE_DATETIME, CURRENT_GENERATION_IN_KWH

solarRecords = [[308057, '05/02/2023 08:00', 0.647], [308057, '05/02/2023 09:00', 2.561], [308057, '05/02/2023 10:00', 2.945], [308057, '05/02/2023 11:00', 3.199], [308057, '05/02/2023 12:00', 4.411], [308057, '05/02/2023 13:00', 5.612], [308057, '05/02/2023 14:00', 4.574], [308057, '05/02/2023 15:00', 5.616], [308057, '05/02/2023 16:00', 2.749], [308057, '05/02/2023 17:00', 0.089], [314106, '05/02/2023 08:00', 0.298], [314106, '05/02/2023 09:00', 1.742], [314106, '05/02/2023 10:00', 1.659], [314106, '05/02/2023 11:00', 1.831], [314106, '05/02/2023 12:00', 2.443], [314106, '05/02/2023 13:00', 3.247], [314106, '05/02/2023 14:00', 2.299], [314106, '05/02/2023 15:00', 3.244], [314106, '05/02/2023 16:00', 1.173], [314106, '05/02/2023 17:00', 0.053], [164440, '16/01/2023 08:00', 0.087], [164440, '16/01/2023 09:00', 5.31], [164440, '16/01/2023 10:00', 16.167], [164440, '16/01/2023 11:00', 26.639], [164440, '16/01/2023 12:00', 33.229], [164440, '16/01/2023 13:00', 32.022], [164440, '16/01/2023 14:00', 24.145], [164440, '16/01/2023 15:00', 14.819], [164440, '16/01/2023 16:00', 2.066], [164440, '16/01/2023 17:00', 0.0], [308057, '16/01/2023 09:00', 0.981], [308057, '16/01/2023 10:00', 1.001], [319086, '05/02/2023 08:00', 4.483], [319086, '05/02/2023 09:00', 33.003], [319086, '05/02/2023 10:00', 33.523], [319086, '05/02/2023 11:00', 31.643], [319086, '05/02/2023 12:00', 39.541], [319086, '05/02/2023 13:00', 76.22], [319086, '05/02/2023 14:00', 34.083], [319086, '05/02/2023 15:00', 53.069], [319086, '05/02/2023 16:00', 25.787], [319086, '05/02/2023 17:00', 1.251], [314106, '16/01/2023 08:00', 0.001], [314106, '16/01/2023 09:00', 0.4], [314106, '16/01/2023 10:00', 1.374], [314106, '16/01/2023 11:00', 1.931], [314106, '16/01/2023 12:00', 1.804], [314106, '16/01/2023 13:00', 1.425], [314106, '16/01/2023 14:00', 1.023], [314106, '16/01/2023 15:00', 0.691], [314106, '16/01/2023 16:00', 0.301], [319086, '16/01/2023 09:00', 3.111], [319086, '16/01/2023 10:00', 13.018], [319086, '16/01/2023 11:00', 27.524], [319086, '16/01/2023 12:00', 59.464], [319086, '16/01/2023 13:00', 62.911], [319086, '16/01/2023 14:00', 40.242], [319086, '16/01/2023 15:00', 21.412], [319086, '16/01/2023 16:00', 5.122], [319086, '16/01/2023 17:00', 0.001], [331901, '05/02/2023 08:00', 1.522], [331901, '05/02/2023 09:00', 11.153], [331901, '05/02/2023 10:00', 9.704], [331901, '05/02/2023 11:00', 9.552], [331901, '05/02/2023 12:00', 12.091], [331901, '05/02/2023 13:00', 20.449], [331901, '05/02/2023 14:00', 11.068], [331901, '05/02/2023 15:00', 18.956], [331901, '05/02/2023 16:00', 9.666], [331901, '05/02/2023 17:00', 0.399], [331901, '16/01/2023 08:00', 0.004], [331901, '16/01/2023 09:00', 2.45], [331901, '16/01/2023 10:00', 11.443], [331901, '16/01/2023 11:00', 22.903], [331901, '16/01/2023 12:00', 32.254], [331901, '16/01/2023 13:00', 30.245], [331901, '16/01/2023 14:00', 21.796], [331901, '16/01/2023 15:00', 11.959], [331901, '16/01/2023 16:00', 2.067], [355827, '16/01/2023 08:00', 0.044], [332785, '05/02/2023 08:00', 0.222], [355827, '16/01/2023 09:00', 5.317], [332785, '05/02/2023 09:00', 1.038], [332785, '05/02/2023 10:00', 0.919], [332785, '05/02/2023 11:00', 1.088], [332785, '05/02/2023 12:00', 1.566], [332785, '05/02/2023 13:00', 1.79], [332785, '05/02/2023 14:00', 2.199], [332785, '05/02/2023 15:00', 2.263], [332785, '05/02/2023 16:00', 1.391], [332785, '05/02/2023 17:00', 0.074]]

locationIDToFind = 0
validLocation = False
dateToFind = ""
maxSolarGeneration = 0.0
matchesFound = False

# MAIN PROGRAM

# input a location ID

# ==> choose the correct next line
# while validLocation == False:
# while validLocation == True:
  locationIDToFind = input("enter location id: ")
  # ==> choose the correct next line
  # if locationIDToFind.isalnum() == True:
  # if locationIDToFind.isdigit() == True:
    locationIDToFind = int(locationIDToFind)
    validLocation = True

# input a date as a string in the format dd/mm/yyyy
dateToFind = input("enter date in format dd/mm/yyyy: ")

# ==> complete the processing loop to find the greatest generation reading for that location & date
for record in solarRecords:


# output
if matchesFound == True:
  # ==> complete the gap
  print("Max solar generation (kwh) found for that location/date was {}".format(__________________))
else:
  print("Records matching that location/date were not found")
